#labels Featured,tutorial,sip2peer
=sip2peer Tutorial=

sip2peer is an open-source SIP-based middleware for the implementation of any distributed and peer-to-peer application or overlay without constrains on peer/node nature (traditional PC or mobile nodes) and specific architecture.

Main characteristics are:

 * Multiplatform nature
 * Simple communication API with notification system
 * SIP-Based platform
 * NAT traversal management
 * Efficient, Scalable and Configurable structure

*Supported Platform*

At this moment sip2peer is available for Java SE and Android platforms, but we are working on the iOS release.

==Java/Android Tutorial==

This tutorial shows what are the main element of the library, how to create a simple peer that interacts with the others. We will analyze also the problem of NAT traversal and how to easily manage it with sip2peer. The code of this example and others more complex are available in the Sip2PeerExample.zip in the Download page.

As mentioned before the Java and the Android implementation of the library are based on the java SIP stack called mjSIP [http://www.mjsip.org http://www.mjsip.org] that allows to manage the exchange of SIP messages or multimedia streams. 

Creating our own peer class using sip2peer is extremely simple and it is only necessary to extend the Class called Peer. In our case we have:

{{{ 
public class SimplePeer extends Peer  
}}}

Class's constructor has to call the super method with  the path of peer configuration file (detailed information later in this tutorial) and the unique key of the peer in the network.

{{{
public SimplePeer(String pathConfig) {
		super(pathConfig, "a5ds465a465a45d4s64d6a");
}
}}}

{{{
@Override
protected void onDeliveryMsgFailure(String peerMsgSended, Address receiver,String contentType) {
		...
}

@Override
protected void onDeliveryMsgSuccess(String peerMsgSended, Address receiver,String contentType) {
              ...
}
}}}
   